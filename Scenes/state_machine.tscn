[gd_scene load_steps=2 format=3 uid="uid://l4cpr0pddcxn"]

[sub_resource type="GDScript" id="GDScript_wrm1d"]
script/source = "class_name StateMachine extends Node

#Nodo que se se estara controlando
@onready var controlled_node = self.owner

#Estado por defecto
@export var default_state:StateBase

#Estado actual en tiempo real (es quien ira cambiando segun el que estado esta corriendo)
var current_state:StateBase = null

func ready():
	call_deferred(\"_state_default_start\")

func _state_default_start() -> void:
	current_state = default_state
	_state_start()

#Funcion que prepara las variables para los nuevos estados y lanza el start
func  _state_start() -> void:
	prints(\"StateMachine\", controlled_node, \"start state\", current_state.name)
	#Configuracion del estado
	current_state.controlled_nodo = controlled_node
	current_state.state_machine = self
	current_state.start()
	
func change_to(new_state:String) -> void:
	if current_state and current_state.has_method(\"end\"):current_state.end()
	current_state = get_node(new_state)
	_state_start()
	
#region metodos que se ejecutan solos


func _process(delta: float) -> void:
	if current_state and current_state.has_method(\"on_process\"):
		current_state.on_process(delta)

func _physics_process(delta: float) -> void:
	if current_state and current_state.has_method(\"on_physics_process\"):
		current_state.on_physics_process(delta)
	
func _input(event: InputEvent) -> void:
	if current_state and current_state.has_method(\"on_input\"):
		current_state.on_input(event)

func _unhandled_input(event: InputEvent) -> void:
	if current_state and current_state.has_method(\"on_unhandled_input\"):
		current_state.on_unhandled_input(event)

func _unhandled_key_input(event: InputEvent) -> void:
	if current_state and current_state.has_method(\"on_unhandled_key_input\"):
		current_state.on_unhandled_key_input(event)

#endregion
"

[node name="StateMachine" type="Node"]
script = SubResource("GDScript_wrm1d")
